// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry/uptimer/cfCmdGenerator"
	"github.com/cloudfoundry/uptimer/cmdRunner"
)

type FakeCfCmdGenerator struct {
	ApiStub        func(url string) cmdRunner.CmdStartWaiter
	apiMutex       sync.RWMutex
	apiArgsForCall []struct {
		url string
	}
	apiReturns struct {
		result1 cmdRunner.CmdStartWaiter
	}
	AuthStub        func(username, password string) cmdRunner.CmdStartWaiter
	authMutex       sync.RWMutex
	authArgsForCall []struct {
		username string
		password string
	}
	authReturns struct {
		result1 cmdRunner.CmdStartWaiter
	}
	CreateOrgStub        func(org string) cmdRunner.CmdStartWaiter
	createOrgMutex       sync.RWMutex
	createOrgArgsForCall []struct {
		org string
	}
	createOrgReturns struct {
		result1 cmdRunner.CmdStartWaiter
	}
	CreateSpaceStub        func(org, space string) cmdRunner.CmdStartWaiter
	createSpaceMutex       sync.RWMutex
	createSpaceArgsForCall []struct {
		org   string
		space string
	}
	createSpaceReturns struct {
		result1 cmdRunner.CmdStartWaiter
	}
	TargetStub        func(org, space string) cmdRunner.CmdStartWaiter
	targetMutex       sync.RWMutex
	targetArgsForCall []struct {
		org   string
		space string
	}
	targetReturns struct {
		result1 cmdRunner.CmdStartWaiter
	}
	PushStub        func(name, path string) cmdRunner.CmdStartWaiter
	pushMutex       sync.RWMutex
	pushArgsForCall []struct {
		name string
		path string
	}
	pushReturns struct {
		result1 cmdRunner.CmdStartWaiter
	}
	DeleteOrgStub        func(org string) cmdRunner.CmdStartWaiter
	deleteOrgMutex       sync.RWMutex
	deleteOrgArgsForCall []struct {
		org string
	}
	deleteOrgReturns struct {
		result1 cmdRunner.CmdStartWaiter
	}
	LogOutStub        func() cmdRunner.CmdStartWaiter
	logOutMutex       sync.RWMutex
	logOutArgsForCall []struct{}
	logOutReturns     struct {
		result1 cmdRunner.CmdStartWaiter
	}
}

func (fake *FakeCfCmdGenerator) Api(url string) cmdRunner.CmdStartWaiter {
	fake.apiMutex.Lock()
	fake.apiArgsForCall = append(fake.apiArgsForCall, struct {
		url string
	}{url})
	fake.apiMutex.Unlock()
	if fake.ApiStub != nil {
		return fake.ApiStub(url)
	} else {
		return fake.apiReturns.result1
	}
}

func (fake *FakeCfCmdGenerator) ApiCallCount() int {
	fake.apiMutex.RLock()
	defer fake.apiMutex.RUnlock()
	return len(fake.apiArgsForCall)
}

func (fake *FakeCfCmdGenerator) ApiArgsForCall(i int) string {
	fake.apiMutex.RLock()
	defer fake.apiMutex.RUnlock()
	return fake.apiArgsForCall[i].url
}

func (fake *FakeCfCmdGenerator) ApiReturns(result1 cmdRunner.CmdStartWaiter) {
	fake.ApiStub = nil
	fake.apiReturns = struct {
		result1 cmdRunner.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) Auth(username string, password string) cmdRunner.CmdStartWaiter {
	fake.authMutex.Lock()
	fake.authArgsForCall = append(fake.authArgsForCall, struct {
		username string
		password string
	}{username, password})
	fake.authMutex.Unlock()
	if fake.AuthStub != nil {
		return fake.AuthStub(username, password)
	} else {
		return fake.authReturns.result1
	}
}

func (fake *FakeCfCmdGenerator) AuthCallCount() int {
	fake.authMutex.RLock()
	defer fake.authMutex.RUnlock()
	return len(fake.authArgsForCall)
}

func (fake *FakeCfCmdGenerator) AuthArgsForCall(i int) (string, string) {
	fake.authMutex.RLock()
	defer fake.authMutex.RUnlock()
	return fake.authArgsForCall[i].username, fake.authArgsForCall[i].password
}

func (fake *FakeCfCmdGenerator) AuthReturns(result1 cmdRunner.CmdStartWaiter) {
	fake.AuthStub = nil
	fake.authReturns = struct {
		result1 cmdRunner.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) CreateOrg(org string) cmdRunner.CmdStartWaiter {
	fake.createOrgMutex.Lock()
	fake.createOrgArgsForCall = append(fake.createOrgArgsForCall, struct {
		org string
	}{org})
	fake.createOrgMutex.Unlock()
	if fake.CreateOrgStub != nil {
		return fake.CreateOrgStub(org)
	} else {
		return fake.createOrgReturns.result1
	}
}

func (fake *FakeCfCmdGenerator) CreateOrgCallCount() int {
	fake.createOrgMutex.RLock()
	defer fake.createOrgMutex.RUnlock()
	return len(fake.createOrgArgsForCall)
}

func (fake *FakeCfCmdGenerator) CreateOrgArgsForCall(i int) string {
	fake.createOrgMutex.RLock()
	defer fake.createOrgMutex.RUnlock()
	return fake.createOrgArgsForCall[i].org
}

func (fake *FakeCfCmdGenerator) CreateOrgReturns(result1 cmdRunner.CmdStartWaiter) {
	fake.CreateOrgStub = nil
	fake.createOrgReturns = struct {
		result1 cmdRunner.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) CreateSpace(org string, space string) cmdRunner.CmdStartWaiter {
	fake.createSpaceMutex.Lock()
	fake.createSpaceArgsForCall = append(fake.createSpaceArgsForCall, struct {
		org   string
		space string
	}{org, space})
	fake.createSpaceMutex.Unlock()
	if fake.CreateSpaceStub != nil {
		return fake.CreateSpaceStub(org, space)
	} else {
		return fake.createSpaceReturns.result1
	}
}

func (fake *FakeCfCmdGenerator) CreateSpaceCallCount() int {
	fake.createSpaceMutex.RLock()
	defer fake.createSpaceMutex.RUnlock()
	return len(fake.createSpaceArgsForCall)
}

func (fake *FakeCfCmdGenerator) CreateSpaceArgsForCall(i int) (string, string) {
	fake.createSpaceMutex.RLock()
	defer fake.createSpaceMutex.RUnlock()
	return fake.createSpaceArgsForCall[i].org, fake.createSpaceArgsForCall[i].space
}

func (fake *FakeCfCmdGenerator) CreateSpaceReturns(result1 cmdRunner.CmdStartWaiter) {
	fake.CreateSpaceStub = nil
	fake.createSpaceReturns = struct {
		result1 cmdRunner.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) Target(org string, space string) cmdRunner.CmdStartWaiter {
	fake.targetMutex.Lock()
	fake.targetArgsForCall = append(fake.targetArgsForCall, struct {
		org   string
		space string
	}{org, space})
	fake.targetMutex.Unlock()
	if fake.TargetStub != nil {
		return fake.TargetStub(org, space)
	} else {
		return fake.targetReturns.result1
	}
}

func (fake *FakeCfCmdGenerator) TargetCallCount() int {
	fake.targetMutex.RLock()
	defer fake.targetMutex.RUnlock()
	return len(fake.targetArgsForCall)
}

func (fake *FakeCfCmdGenerator) TargetArgsForCall(i int) (string, string) {
	fake.targetMutex.RLock()
	defer fake.targetMutex.RUnlock()
	return fake.targetArgsForCall[i].org, fake.targetArgsForCall[i].space
}

func (fake *FakeCfCmdGenerator) TargetReturns(result1 cmdRunner.CmdStartWaiter) {
	fake.TargetStub = nil
	fake.targetReturns = struct {
		result1 cmdRunner.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) Push(name string, path string) cmdRunner.CmdStartWaiter {
	fake.pushMutex.Lock()
	fake.pushArgsForCall = append(fake.pushArgsForCall, struct {
		name string
		path string
	}{name, path})
	fake.pushMutex.Unlock()
	if fake.PushStub != nil {
		return fake.PushStub(name, path)
	} else {
		return fake.pushReturns.result1
	}
}

func (fake *FakeCfCmdGenerator) PushCallCount() int {
	fake.pushMutex.RLock()
	defer fake.pushMutex.RUnlock()
	return len(fake.pushArgsForCall)
}

func (fake *FakeCfCmdGenerator) PushArgsForCall(i int) (string, string) {
	fake.pushMutex.RLock()
	defer fake.pushMutex.RUnlock()
	return fake.pushArgsForCall[i].name, fake.pushArgsForCall[i].path
}

func (fake *FakeCfCmdGenerator) PushReturns(result1 cmdRunner.CmdStartWaiter) {
	fake.PushStub = nil
	fake.pushReturns = struct {
		result1 cmdRunner.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) DeleteOrg(org string) cmdRunner.CmdStartWaiter {
	fake.deleteOrgMutex.Lock()
	fake.deleteOrgArgsForCall = append(fake.deleteOrgArgsForCall, struct {
		org string
	}{org})
	fake.deleteOrgMutex.Unlock()
	if fake.DeleteOrgStub != nil {
		return fake.DeleteOrgStub(org)
	} else {
		return fake.deleteOrgReturns.result1
	}
}

func (fake *FakeCfCmdGenerator) DeleteOrgCallCount() int {
	fake.deleteOrgMutex.RLock()
	defer fake.deleteOrgMutex.RUnlock()
	return len(fake.deleteOrgArgsForCall)
}

func (fake *FakeCfCmdGenerator) DeleteOrgArgsForCall(i int) string {
	fake.deleteOrgMutex.RLock()
	defer fake.deleteOrgMutex.RUnlock()
	return fake.deleteOrgArgsForCall[i].org
}

func (fake *FakeCfCmdGenerator) DeleteOrgReturns(result1 cmdRunner.CmdStartWaiter) {
	fake.DeleteOrgStub = nil
	fake.deleteOrgReturns = struct {
		result1 cmdRunner.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) LogOut() cmdRunner.CmdStartWaiter {
	fake.logOutMutex.Lock()
	fake.logOutArgsForCall = append(fake.logOutArgsForCall, struct{}{})
	fake.logOutMutex.Unlock()
	if fake.LogOutStub != nil {
		return fake.LogOutStub()
	} else {
		return fake.logOutReturns.result1
	}
}

func (fake *FakeCfCmdGenerator) LogOutCallCount() int {
	fake.logOutMutex.RLock()
	defer fake.logOutMutex.RUnlock()
	return len(fake.logOutArgsForCall)
}

func (fake *FakeCfCmdGenerator) LogOutReturns(result1 cmdRunner.CmdStartWaiter) {
	fake.LogOutStub = nil
	fake.logOutReturns = struct {
		result1 cmdRunner.CmdStartWaiter
	}{result1}
}

var _ cfCmdGenerator.CfCmdGenerator = new(FakeCfCmdGenerator)
