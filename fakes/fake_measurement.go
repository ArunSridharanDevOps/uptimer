// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry/uptimer/measurement"
)

type FakeMeasurement struct {
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct{}
	nameReturns     struct {
		result1 string
	}
	StartStub        func() error
	startMutex       sync.RWMutex
	startArgsForCall []struct{}
	startReturns     struct {
		result1 error
	}
	StopStub        func() error
	stopMutex       sync.RWMutex
	stopArgsForCall []struct{}
	stopReturns     struct {
		result1 error
	}
	ResultsStub        func() (measurement.ResultSet, error)
	resultsMutex       sync.RWMutex
	resultsArgsForCall []struct{}
	resultsReturns     struct {
		result1 measurement.ResultSet
		result2 error
	}
	FailedStub        func() bool
	failedMutex       sync.RWMutex
	failedArgsForCall []struct{}
	failedReturns     struct {
		result1 bool
	}
	SummaryStub        func() string
	summaryMutex       sync.RWMutex
	summaryArgsForCall []struct{}
	summaryReturns     struct {
		result1 string
	}
}

func (fake *FakeMeasurement) Name() string {
	fake.nameMutex.Lock()
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct{}{})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub()
	} else {
		return fake.nameReturns.result1
	}
}

func (fake *FakeMeasurement) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeMeasurement) NameReturns(result1 string) {
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeMeasurement) Start() error {
	fake.startMutex.Lock()
	fake.startArgsForCall = append(fake.startArgsForCall, struct{}{})
	fake.startMutex.Unlock()
	if fake.StartStub != nil {
		return fake.StartStub()
	} else {
		return fake.startReturns.result1
	}
}

func (fake *FakeMeasurement) StartCallCount() int {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return len(fake.startArgsForCall)
}

func (fake *FakeMeasurement) StartReturns(result1 error) {
	fake.StartStub = nil
	fake.startReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMeasurement) Stop() error {
	fake.stopMutex.Lock()
	fake.stopArgsForCall = append(fake.stopArgsForCall, struct{}{})
	fake.stopMutex.Unlock()
	if fake.StopStub != nil {
		return fake.StopStub()
	} else {
		return fake.stopReturns.result1
	}
}

func (fake *FakeMeasurement) StopCallCount() int {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return len(fake.stopArgsForCall)
}

func (fake *FakeMeasurement) StopReturns(result1 error) {
	fake.StopStub = nil
	fake.stopReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMeasurement) Results() (measurement.ResultSet, error) {
	fake.resultsMutex.Lock()
	fake.resultsArgsForCall = append(fake.resultsArgsForCall, struct{}{})
	fake.resultsMutex.Unlock()
	if fake.ResultsStub != nil {
		return fake.ResultsStub()
	} else {
		return fake.resultsReturns.result1, fake.resultsReturns.result2
	}
}

func (fake *FakeMeasurement) ResultsCallCount() int {
	fake.resultsMutex.RLock()
	defer fake.resultsMutex.RUnlock()
	return len(fake.resultsArgsForCall)
}

func (fake *FakeMeasurement) ResultsReturns(result1 measurement.ResultSet, result2 error) {
	fake.ResultsStub = nil
	fake.resultsReturns = struct {
		result1 measurement.ResultSet
		result2 error
	}{result1, result2}
}

func (fake *FakeMeasurement) Failed() bool {
	fake.failedMutex.Lock()
	fake.failedArgsForCall = append(fake.failedArgsForCall, struct{}{})
	fake.failedMutex.Unlock()
	if fake.FailedStub != nil {
		return fake.FailedStub()
	} else {
		return fake.failedReturns.result1
	}
}

func (fake *FakeMeasurement) FailedCallCount() int {
	fake.failedMutex.RLock()
	defer fake.failedMutex.RUnlock()
	return len(fake.failedArgsForCall)
}

func (fake *FakeMeasurement) FailedReturns(result1 bool) {
	fake.FailedStub = nil
	fake.failedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeMeasurement) Summary() string {
	fake.summaryMutex.Lock()
	fake.summaryArgsForCall = append(fake.summaryArgsForCall, struct{}{})
	fake.summaryMutex.Unlock()
	if fake.SummaryStub != nil {
		return fake.SummaryStub()
	} else {
		return fake.summaryReturns.result1
	}
}

func (fake *FakeMeasurement) SummaryCallCount() int {
	fake.summaryMutex.RLock()
	defer fake.summaryMutex.RUnlock()
	return len(fake.summaryArgsForCall)
}

func (fake *FakeMeasurement) SummaryReturns(result1 string) {
	fake.SummaryStub = nil
	fake.summaryReturns = struct {
		result1 string
	}{result1}
}

var _ measurement.Measurement = new(FakeMeasurement)
