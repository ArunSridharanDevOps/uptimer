// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/cloudfoundry/uptimer/cmdRunner"
	"github.com/cloudfoundry/uptimer/cmdStartWaiter"
)

type FakeCmdRunner struct {
	RunStub        func(cmdStartWaiter cmdStartWaiter.CmdStartWaiter) error
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		cmdStartWaiter cmdStartWaiter.CmdStartWaiter
	}
	runReturns struct {
		result1 error
	}
	runReturnsOnCall map[int]struct {
		result1 error
	}
	RunInSequenceStub        func(cmdStartWaiters ...cmdStartWaiter.CmdStartWaiter) error
	runInSequenceMutex       sync.RWMutex
	runInSequenceArgsForCall []struct {
		cmdStartWaiters []cmdStartWaiter.CmdStartWaiter
	}
	runInSequenceReturns struct {
		result1 error
	}
	runInSequenceReturnsOnCall map[int]struct {
		result1 error
	}
	RunWithContextStub        func(ctx context.Context, cmdStartWaiter cmdStartWaiter.CmdStartWaiter) error
	runWithContextMutex       sync.RWMutex
	runWithContextArgsForCall []struct {
		ctx            context.Context
		cmdStartWaiter cmdStartWaiter.CmdStartWaiter
	}
	runWithContextReturns struct {
		result1 error
	}
	runWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	RunInSequenceWithContextStub        func(ctx context.Context, cmdStartWaiters ...cmdStartWaiter.CmdStartWaiter) error
	runInSequenceWithContextMutex       sync.RWMutex
	runInSequenceWithContextArgsForCall []struct {
		ctx             context.Context
		cmdStartWaiters []cmdStartWaiter.CmdStartWaiter
	}
	runInSequenceWithContextReturns struct {
		result1 error
	}
	runInSequenceWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCmdRunner) Run(csw cmdStartWaiter.CmdStartWaiter) error {
	fake.runMutex.Lock()
	ret, specificReturn := fake.runReturnsOnCall[len(fake.runArgsForCall)]
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		cmdStartWaiter cmdStartWaiter.CmdStartWaiter
	}{csw})
	fake.recordInvocation("Run", []interface{}{csw})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		return fake.RunStub(csw)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.runReturns.result1
}

func (fake *FakeCmdRunner) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeCmdRunner) RunArgsForCall(i int) cmdStartWaiter.CmdStartWaiter {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return fake.runArgsForCall[i].cmdStartWaiter
}

func (fake *FakeCmdRunner) RunReturns(result1 error) {
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCmdRunner) RunReturnsOnCall(i int, result1 error) {
	fake.RunStub = nil
	if fake.runReturnsOnCall == nil {
		fake.runReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCmdRunner) RunInSequence(cmdStartWaiters ...cmdStartWaiter.CmdStartWaiter) error {
	fake.runInSequenceMutex.Lock()
	ret, specificReturn := fake.runInSequenceReturnsOnCall[len(fake.runInSequenceArgsForCall)]
	fake.runInSequenceArgsForCall = append(fake.runInSequenceArgsForCall, struct {
		cmdStartWaiters []cmdStartWaiter.CmdStartWaiter
	}{cmdStartWaiters})
	fake.recordInvocation("RunInSequence", []interface{}{cmdStartWaiters})
	fake.runInSequenceMutex.Unlock()
	if fake.RunInSequenceStub != nil {
		return fake.RunInSequenceStub(cmdStartWaiters...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.runInSequenceReturns.result1
}

func (fake *FakeCmdRunner) RunInSequenceCallCount() int {
	fake.runInSequenceMutex.RLock()
	defer fake.runInSequenceMutex.RUnlock()
	return len(fake.runInSequenceArgsForCall)
}

func (fake *FakeCmdRunner) RunInSequenceArgsForCall(i int) []cmdStartWaiter.CmdStartWaiter {
	fake.runInSequenceMutex.RLock()
	defer fake.runInSequenceMutex.RUnlock()
	return fake.runInSequenceArgsForCall[i].cmdStartWaiters
}

func (fake *FakeCmdRunner) RunInSequenceReturns(result1 error) {
	fake.RunInSequenceStub = nil
	fake.runInSequenceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCmdRunner) RunInSequenceReturnsOnCall(i int, result1 error) {
	fake.RunInSequenceStub = nil
	if fake.runInSequenceReturnsOnCall == nil {
		fake.runInSequenceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runInSequenceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCmdRunner) RunWithContext(ctx context.Context, csw cmdStartWaiter.CmdStartWaiter) error {
	fake.runWithContextMutex.Lock()
	ret, specificReturn := fake.runWithContextReturnsOnCall[len(fake.runWithContextArgsForCall)]
	fake.runWithContextArgsForCall = append(fake.runWithContextArgsForCall, struct {
		ctx            context.Context
		cmdStartWaiter cmdStartWaiter.CmdStartWaiter
	}{ctx, csw})
	fake.recordInvocation("RunWithContext", []interface{}{ctx, csw})
	fake.runWithContextMutex.Unlock()
	if fake.RunWithContextStub != nil {
		return fake.RunWithContextStub(ctx, csw)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.runWithContextReturns.result1
}

func (fake *FakeCmdRunner) RunWithContextCallCount() int {
	fake.runWithContextMutex.RLock()
	defer fake.runWithContextMutex.RUnlock()
	return len(fake.runWithContextArgsForCall)
}

func (fake *FakeCmdRunner) RunWithContextArgsForCall(i int) (context.Context, cmdStartWaiter.CmdStartWaiter) {
	fake.runWithContextMutex.RLock()
	defer fake.runWithContextMutex.RUnlock()
	return fake.runWithContextArgsForCall[i].ctx, fake.runWithContextArgsForCall[i].cmdStartWaiter
}

func (fake *FakeCmdRunner) RunWithContextReturns(result1 error) {
	fake.RunWithContextStub = nil
	fake.runWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCmdRunner) RunWithContextReturnsOnCall(i int, result1 error) {
	fake.RunWithContextStub = nil
	if fake.runWithContextReturnsOnCall == nil {
		fake.runWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCmdRunner) RunInSequenceWithContext(ctx context.Context, cmdStartWaiters ...cmdStartWaiter.CmdStartWaiter) error {
	fake.runInSequenceWithContextMutex.Lock()
	ret, specificReturn := fake.runInSequenceWithContextReturnsOnCall[len(fake.runInSequenceWithContextArgsForCall)]
	fake.runInSequenceWithContextArgsForCall = append(fake.runInSequenceWithContextArgsForCall, struct {
		ctx             context.Context
		cmdStartWaiters []cmdStartWaiter.CmdStartWaiter
	}{ctx, cmdStartWaiters})
	fake.recordInvocation("RunInSequenceWithContext", []interface{}{ctx, cmdStartWaiters})
	fake.runInSequenceWithContextMutex.Unlock()
	if fake.RunInSequenceWithContextStub != nil {
		return fake.RunInSequenceWithContextStub(ctx, cmdStartWaiters...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.runInSequenceWithContextReturns.result1
}

func (fake *FakeCmdRunner) RunInSequenceWithContextCallCount() int {
	fake.runInSequenceWithContextMutex.RLock()
	defer fake.runInSequenceWithContextMutex.RUnlock()
	return len(fake.runInSequenceWithContextArgsForCall)
}

func (fake *FakeCmdRunner) RunInSequenceWithContextArgsForCall(i int) (context.Context, []cmdStartWaiter.CmdStartWaiter) {
	fake.runInSequenceWithContextMutex.RLock()
	defer fake.runInSequenceWithContextMutex.RUnlock()
	return fake.runInSequenceWithContextArgsForCall[i].ctx, fake.runInSequenceWithContextArgsForCall[i].cmdStartWaiters
}

func (fake *FakeCmdRunner) RunInSequenceWithContextReturns(result1 error) {
	fake.RunInSequenceWithContextStub = nil
	fake.runInSequenceWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCmdRunner) RunInSequenceWithContextReturnsOnCall(i int, result1 error) {
	fake.RunInSequenceWithContextStub = nil
	if fake.runInSequenceWithContextReturnsOnCall == nil {
		fake.runInSequenceWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runInSequenceWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCmdRunner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	fake.runInSequenceMutex.RLock()
	defer fake.runInSequenceMutex.RUnlock()
	fake.runWithContextMutex.RLock()
	defer fake.runWithContextMutex.RUnlock()
	fake.runInSequenceWithContextMutex.RLock()
	defer fake.runInSequenceWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCmdRunner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cmdRunner.CmdRunner = new(FakeCmdRunner)
