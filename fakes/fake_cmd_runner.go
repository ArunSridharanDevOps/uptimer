// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry/uptimer/cmdRunner"
)

type FakeCmdRunner struct {
	RunStub        func(cmdStartWaiter cmdRunner.CmdStartWaiter) error
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		cmdStartWaiter cmdRunner.CmdStartWaiter
	}
	runReturns struct {
		result1 error
	}
	RunInSequenceStub        func(cmdStartWaiters ...cmdRunner.CmdStartWaiter) error
	runInSequenceMutex       sync.RWMutex
	runInSequenceArgsForCall []struct {
		cmdStartWaiters []cmdRunner.CmdStartWaiter
	}
	runInSequenceReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCmdRunner) Run(cmdStartWaiter cmdRunner.CmdStartWaiter) error {
	fake.runMutex.Lock()
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		cmdStartWaiter cmdRunner.CmdStartWaiter
	}{cmdStartWaiter})
	fake.recordInvocation("Run", []interface{}{cmdStartWaiter})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		return fake.RunStub(cmdStartWaiter)
	} else {
		return fake.runReturns.result1
	}
}

func (fake *FakeCmdRunner) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeCmdRunner) RunArgsForCall(i int) cmdRunner.CmdStartWaiter {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return fake.runArgsForCall[i].cmdStartWaiter
}

func (fake *FakeCmdRunner) RunReturns(result1 error) {
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCmdRunner) RunInSequence(cmdStartWaiters ...cmdRunner.CmdStartWaiter) error {
	fake.runInSequenceMutex.Lock()
	fake.runInSequenceArgsForCall = append(fake.runInSequenceArgsForCall, struct {
		cmdStartWaiters []cmdRunner.CmdStartWaiter
	}{cmdStartWaiters})
	fake.recordInvocation("RunInSequence", []interface{}{cmdStartWaiters})
	fake.runInSequenceMutex.Unlock()
	if fake.RunInSequenceStub != nil {
		return fake.RunInSequenceStub(cmdStartWaiters...)
	} else {
		return fake.runInSequenceReturns.result1
	}
}

func (fake *FakeCmdRunner) RunInSequenceCallCount() int {
	fake.runInSequenceMutex.RLock()
	defer fake.runInSequenceMutex.RUnlock()
	return len(fake.runInSequenceArgsForCall)
}

func (fake *FakeCmdRunner) RunInSequenceArgsForCall(i int) []cmdRunner.CmdStartWaiter {
	fake.runInSequenceMutex.RLock()
	defer fake.runInSequenceMutex.RUnlock()
	return fake.runInSequenceArgsForCall[i].cmdStartWaiters
}

func (fake *FakeCmdRunner) RunInSequenceReturns(result1 error) {
	fake.RunInSequenceStub = nil
	fake.runInSequenceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCmdRunner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	fake.runInSequenceMutex.RLock()
	defer fake.runInSequenceMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCmdRunner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cmdRunner.CmdRunner = new(FakeCmdRunner)
