// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry/uptimer/cfWorkflow"
	"github.com/cloudfoundry/uptimer/cmdRunner"
)

type FakeCfWorkflow struct {
	SetupStub        func() []cmdRunner.CmdStartWaiter
	setupMutex       sync.RWMutex
	setupArgsForCall []struct{}
	setupReturns     struct {
		result1 []cmdRunner.CmdStartWaiter
	}
	TearDownStub        func() []cmdRunner.CmdStartWaiter
	tearDownMutex       sync.RWMutex
	tearDownArgsForCall []struct{}
	tearDownReturns     struct {
		result1 []cmdRunner.CmdStartWaiter
	}
	AppUrlStub        func() string
	appUrlMutex       sync.RWMutex
	appUrlArgsForCall []struct{}
	appUrlReturns     struct {
		result1 string
	}
}

func (fake *FakeCfWorkflow) Setup() []cmdRunner.CmdStartWaiter {
	fake.setupMutex.Lock()
	fake.setupArgsForCall = append(fake.setupArgsForCall, struct{}{})
	fake.setupMutex.Unlock()
	if fake.SetupStub != nil {
		return fake.SetupStub()
	} else {
		return fake.setupReturns.result1
	}
}

func (fake *FakeCfWorkflow) SetupCallCount() int {
	fake.setupMutex.RLock()
	defer fake.setupMutex.RUnlock()
	return len(fake.setupArgsForCall)
}

func (fake *FakeCfWorkflow) SetupReturns(result1 []cmdRunner.CmdStartWaiter) {
	fake.SetupStub = nil
	fake.setupReturns = struct {
		result1 []cmdRunner.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfWorkflow) TearDown() []cmdRunner.CmdStartWaiter {
	fake.tearDownMutex.Lock()
	fake.tearDownArgsForCall = append(fake.tearDownArgsForCall, struct{}{})
	fake.tearDownMutex.Unlock()
	if fake.TearDownStub != nil {
		return fake.TearDownStub()
	} else {
		return fake.tearDownReturns.result1
	}
}

func (fake *FakeCfWorkflow) TearDownCallCount() int {
	fake.tearDownMutex.RLock()
	defer fake.tearDownMutex.RUnlock()
	return len(fake.tearDownArgsForCall)
}

func (fake *FakeCfWorkflow) TearDownReturns(result1 []cmdRunner.CmdStartWaiter) {
	fake.TearDownStub = nil
	fake.tearDownReturns = struct {
		result1 []cmdRunner.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfWorkflow) AppUrl() string {
	fake.appUrlMutex.Lock()
	fake.appUrlArgsForCall = append(fake.appUrlArgsForCall, struct{}{})
	fake.appUrlMutex.Unlock()
	if fake.AppUrlStub != nil {
		return fake.AppUrlStub()
	} else {
		return fake.appUrlReturns.result1
	}
}

func (fake *FakeCfWorkflow) AppUrlCallCount() int {
	fake.appUrlMutex.RLock()
	defer fake.appUrlMutex.RUnlock()
	return len(fake.appUrlArgsForCall)
}

func (fake *FakeCfWorkflow) AppUrlReturns(result1 string) {
	fake.AppUrlStub = nil
	fake.appUrlReturns = struct {
		result1 string
	}{result1}
}

var _ cfWorkflow.CfWorkflow = new(FakeCfWorkflow)
