// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/cloudfoundry/uptimer/cfWorkflow"
	"github.com/cloudfoundry/uptimer/cmdStartWaiter"
)

type FakeCfWorkflow struct {
	AppUrlStub        func() string
	appUrlMutex       sync.RWMutex
	appUrlArgsForCall []struct{}
	appUrlReturns     struct {
		result1 string
	}
	appUrlReturnsOnCall map[int]struct {
		result1 string
	}
	SetupStub        func() []cmdStartWaiter.CmdStartWaiter
	setupMutex       sync.RWMutex
	setupArgsForCall []struct{}
	setupReturns     struct {
		result1 []cmdStartWaiter.CmdStartWaiter
	}
	setupReturnsOnCall map[int]struct {
		result1 []cmdStartWaiter.CmdStartWaiter
	}
	PushStub        func() []cmdStartWaiter.CmdStartWaiter
	pushMutex       sync.RWMutex
	pushArgsForCall []struct{}
	pushReturns     struct {
		result1 []cmdStartWaiter.CmdStartWaiter
	}
	pushReturnsOnCall map[int]struct {
		result1 []cmdStartWaiter.CmdStartWaiter
	}
	DeleteStub        func() []cmdStartWaiter.CmdStartWaiter
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct{}
	deleteReturns     struct {
		result1 []cmdStartWaiter.CmdStartWaiter
	}
	deleteReturnsOnCall map[int]struct {
		result1 []cmdStartWaiter.CmdStartWaiter
	}
	TearDownStub        func() []cmdStartWaiter.CmdStartWaiter
	tearDownMutex       sync.RWMutex
	tearDownArgsForCall []struct{}
	tearDownReturns     struct {
		result1 []cmdStartWaiter.CmdStartWaiter
	}
	tearDownReturnsOnCall map[int]struct {
		result1 []cmdStartWaiter.CmdStartWaiter
	}
	RecentLogsStub        func() []cmdStartWaiter.CmdStartWaiter
	recentLogsMutex       sync.RWMutex
	recentLogsArgsForCall []struct{}
	recentLogsReturns     struct {
		result1 []cmdStartWaiter.CmdStartWaiter
	}
	recentLogsReturnsOnCall map[int]struct {
		result1 []cmdStartWaiter.CmdStartWaiter
	}
	StreamLogsStub        func(ctx context.Context) []cmdStartWaiter.CmdStartWaiter
	streamLogsMutex       sync.RWMutex
	streamLogsArgsForCall []struct {
		ctx context.Context
	}
	streamLogsReturns struct {
		result1 []cmdStartWaiter.CmdStartWaiter
	}
	streamLogsReturnsOnCall map[int]struct {
		result1 []cmdStartWaiter.CmdStartWaiter
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCfWorkflow) AppUrl() string {
	fake.appUrlMutex.Lock()
	ret, specificReturn := fake.appUrlReturnsOnCall[len(fake.appUrlArgsForCall)]
	fake.appUrlArgsForCall = append(fake.appUrlArgsForCall, struct{}{})
	fake.recordInvocation("AppUrl", []interface{}{})
	fake.appUrlMutex.Unlock()
	if fake.AppUrlStub != nil {
		return fake.AppUrlStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.appUrlReturns.result1
}

func (fake *FakeCfWorkflow) AppUrlCallCount() int {
	fake.appUrlMutex.RLock()
	defer fake.appUrlMutex.RUnlock()
	return len(fake.appUrlArgsForCall)
}

func (fake *FakeCfWorkflow) AppUrlReturns(result1 string) {
	fake.AppUrlStub = nil
	fake.appUrlReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeCfWorkflow) AppUrlReturnsOnCall(i int, result1 string) {
	fake.AppUrlStub = nil
	if fake.appUrlReturnsOnCall == nil {
		fake.appUrlReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.appUrlReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeCfWorkflow) Setup() []cmdStartWaiter.CmdStartWaiter {
	fake.setupMutex.Lock()
	ret, specificReturn := fake.setupReturnsOnCall[len(fake.setupArgsForCall)]
	fake.setupArgsForCall = append(fake.setupArgsForCall, struct{}{})
	fake.recordInvocation("Setup", []interface{}{})
	fake.setupMutex.Unlock()
	if fake.SetupStub != nil {
		return fake.SetupStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.setupReturns.result1
}

func (fake *FakeCfWorkflow) SetupCallCount() int {
	fake.setupMutex.RLock()
	defer fake.setupMutex.RUnlock()
	return len(fake.setupArgsForCall)
}

func (fake *FakeCfWorkflow) SetupReturns(result1 []cmdStartWaiter.CmdStartWaiter) {
	fake.SetupStub = nil
	fake.setupReturns = struct {
		result1 []cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfWorkflow) SetupReturnsOnCall(i int, result1 []cmdStartWaiter.CmdStartWaiter) {
	fake.SetupStub = nil
	if fake.setupReturnsOnCall == nil {
		fake.setupReturnsOnCall = make(map[int]struct {
			result1 []cmdStartWaiter.CmdStartWaiter
		})
	}
	fake.setupReturnsOnCall[i] = struct {
		result1 []cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfWorkflow) Push() []cmdStartWaiter.CmdStartWaiter {
	fake.pushMutex.Lock()
	ret, specificReturn := fake.pushReturnsOnCall[len(fake.pushArgsForCall)]
	fake.pushArgsForCall = append(fake.pushArgsForCall, struct{}{})
	fake.recordInvocation("Push", []interface{}{})
	fake.pushMutex.Unlock()
	if fake.PushStub != nil {
		return fake.PushStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.pushReturns.result1
}

func (fake *FakeCfWorkflow) PushCallCount() int {
	fake.pushMutex.RLock()
	defer fake.pushMutex.RUnlock()
	return len(fake.pushArgsForCall)
}

func (fake *FakeCfWorkflow) PushReturns(result1 []cmdStartWaiter.CmdStartWaiter) {
	fake.PushStub = nil
	fake.pushReturns = struct {
		result1 []cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfWorkflow) PushReturnsOnCall(i int, result1 []cmdStartWaiter.CmdStartWaiter) {
	fake.PushStub = nil
	if fake.pushReturnsOnCall == nil {
		fake.pushReturnsOnCall = make(map[int]struct {
			result1 []cmdStartWaiter.CmdStartWaiter
		})
	}
	fake.pushReturnsOnCall[i] = struct {
		result1 []cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfWorkflow) Delete() []cmdStartWaiter.CmdStartWaiter {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct{}{})
	fake.recordInvocation("Delete", []interface{}{})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteReturns.result1
}

func (fake *FakeCfWorkflow) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeCfWorkflow) DeleteReturns(result1 []cmdStartWaiter.CmdStartWaiter) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 []cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfWorkflow) DeleteReturnsOnCall(i int, result1 []cmdStartWaiter.CmdStartWaiter) {
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 []cmdStartWaiter.CmdStartWaiter
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 []cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfWorkflow) TearDown() []cmdStartWaiter.CmdStartWaiter {
	fake.tearDownMutex.Lock()
	ret, specificReturn := fake.tearDownReturnsOnCall[len(fake.tearDownArgsForCall)]
	fake.tearDownArgsForCall = append(fake.tearDownArgsForCall, struct{}{})
	fake.recordInvocation("TearDown", []interface{}{})
	fake.tearDownMutex.Unlock()
	if fake.TearDownStub != nil {
		return fake.TearDownStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.tearDownReturns.result1
}

func (fake *FakeCfWorkflow) TearDownCallCount() int {
	fake.tearDownMutex.RLock()
	defer fake.tearDownMutex.RUnlock()
	return len(fake.tearDownArgsForCall)
}

func (fake *FakeCfWorkflow) TearDownReturns(result1 []cmdStartWaiter.CmdStartWaiter) {
	fake.TearDownStub = nil
	fake.tearDownReturns = struct {
		result1 []cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfWorkflow) TearDownReturnsOnCall(i int, result1 []cmdStartWaiter.CmdStartWaiter) {
	fake.TearDownStub = nil
	if fake.tearDownReturnsOnCall == nil {
		fake.tearDownReturnsOnCall = make(map[int]struct {
			result1 []cmdStartWaiter.CmdStartWaiter
		})
	}
	fake.tearDownReturnsOnCall[i] = struct {
		result1 []cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfWorkflow) RecentLogs() []cmdStartWaiter.CmdStartWaiter {
	fake.recentLogsMutex.Lock()
	ret, specificReturn := fake.recentLogsReturnsOnCall[len(fake.recentLogsArgsForCall)]
	fake.recentLogsArgsForCall = append(fake.recentLogsArgsForCall, struct{}{})
	fake.recordInvocation("RecentLogs", []interface{}{})
	fake.recentLogsMutex.Unlock()
	if fake.RecentLogsStub != nil {
		return fake.RecentLogsStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.recentLogsReturns.result1
}

func (fake *FakeCfWorkflow) RecentLogsCallCount() int {
	fake.recentLogsMutex.RLock()
	defer fake.recentLogsMutex.RUnlock()
	return len(fake.recentLogsArgsForCall)
}

func (fake *FakeCfWorkflow) RecentLogsReturns(result1 []cmdStartWaiter.CmdStartWaiter) {
	fake.RecentLogsStub = nil
	fake.recentLogsReturns = struct {
		result1 []cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfWorkflow) RecentLogsReturnsOnCall(i int, result1 []cmdStartWaiter.CmdStartWaiter) {
	fake.RecentLogsStub = nil
	if fake.recentLogsReturnsOnCall == nil {
		fake.recentLogsReturnsOnCall = make(map[int]struct {
			result1 []cmdStartWaiter.CmdStartWaiter
		})
	}
	fake.recentLogsReturnsOnCall[i] = struct {
		result1 []cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfWorkflow) StreamLogs(ctx context.Context) []cmdStartWaiter.CmdStartWaiter {
	fake.streamLogsMutex.Lock()
	ret, specificReturn := fake.streamLogsReturnsOnCall[len(fake.streamLogsArgsForCall)]
	fake.streamLogsArgsForCall = append(fake.streamLogsArgsForCall, struct {
		ctx context.Context
	}{ctx})
	fake.recordInvocation("StreamLogs", []interface{}{ctx})
	fake.streamLogsMutex.Unlock()
	if fake.StreamLogsStub != nil {
		return fake.StreamLogsStub(ctx)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.streamLogsReturns.result1
}

func (fake *FakeCfWorkflow) StreamLogsCallCount() int {
	fake.streamLogsMutex.RLock()
	defer fake.streamLogsMutex.RUnlock()
	return len(fake.streamLogsArgsForCall)
}

func (fake *FakeCfWorkflow) StreamLogsArgsForCall(i int) context.Context {
	fake.streamLogsMutex.RLock()
	defer fake.streamLogsMutex.RUnlock()
	return fake.streamLogsArgsForCall[i].ctx
}

func (fake *FakeCfWorkflow) StreamLogsReturns(result1 []cmdStartWaiter.CmdStartWaiter) {
	fake.StreamLogsStub = nil
	fake.streamLogsReturns = struct {
		result1 []cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfWorkflow) StreamLogsReturnsOnCall(i int, result1 []cmdStartWaiter.CmdStartWaiter) {
	fake.StreamLogsStub = nil
	if fake.streamLogsReturnsOnCall == nil {
		fake.streamLogsReturnsOnCall = make(map[int]struct {
			result1 []cmdStartWaiter.CmdStartWaiter
		})
	}
	fake.streamLogsReturnsOnCall[i] = struct {
		result1 []cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfWorkflow) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.appUrlMutex.RLock()
	defer fake.appUrlMutex.RUnlock()
	fake.setupMutex.RLock()
	defer fake.setupMutex.RUnlock()
	fake.pushMutex.RLock()
	defer fake.pushMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.tearDownMutex.RLock()
	defer fake.tearDownMutex.RUnlock()
	fake.recentLogsMutex.RLock()
	defer fake.recentLogsMutex.RUnlock()
	fake.streamLogsMutex.RLock()
	defer fake.streamLogsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCfWorkflow) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cfWorkflow.CfWorkflow = new(FakeCfWorkflow)
