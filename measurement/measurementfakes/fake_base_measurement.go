// Code generated by counterfeiter. DO NOT EDIT.
package measurementfakes

import (
	"log"
	"sync"

	"github.com/cloudfoundry/uptimer/measurement"
)

type FakeBaseMeasurement struct {
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct{}
	nameReturns     struct {
		result1 string
	}
	nameReturnsOnCall map[int]struct {
		result1 string
	}
	PerformMeasurementStub        func(*log.Logger, measurement.ResultSet)
	performMeasurementMutex       sync.RWMutex
	performMeasurementArgsForCall []struct {
		arg1 *log.Logger
		arg2 measurement.ResultSet
	}
	FailedStub        func(rs measurement.ResultSet) bool
	failedMutex       sync.RWMutex
	failedArgsForCall []struct {
		rs measurement.ResultSet
	}
	failedReturns struct {
		result1 bool
	}
	failedReturnsOnCall map[int]struct {
		result1 bool
	}
	SummaryStub        func(rs measurement.ResultSet) string
	summaryMutex       sync.RWMutex
	summaryArgsForCall []struct {
		rs measurement.ResultSet
	}
	summaryReturns struct {
		result1 string
	}
	summaryReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBaseMeasurement) Name() string {
	fake.nameMutex.Lock()
	ret, specificReturn := fake.nameReturnsOnCall[len(fake.nameArgsForCall)]
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct{}{})
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.nameReturns.result1
}

func (fake *FakeBaseMeasurement) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeBaseMeasurement) NameReturns(result1 string) {
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeBaseMeasurement) NameReturnsOnCall(i int, result1 string) {
	fake.NameStub = nil
	if fake.nameReturnsOnCall == nil {
		fake.nameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.nameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeBaseMeasurement) PerformMeasurement(arg1 *log.Logger, arg2 measurement.ResultSet) {
	fake.performMeasurementMutex.Lock()
	fake.performMeasurementArgsForCall = append(fake.performMeasurementArgsForCall, struct {
		arg1 *log.Logger
		arg2 measurement.ResultSet
	}{arg1, arg2})
	fake.recordInvocation("PerformMeasurement", []interface{}{arg1, arg2})
	fake.performMeasurementMutex.Unlock()
	if fake.PerformMeasurementStub != nil {
		fake.PerformMeasurementStub(arg1, arg2)
	}
}

func (fake *FakeBaseMeasurement) PerformMeasurementCallCount() int {
	fake.performMeasurementMutex.RLock()
	defer fake.performMeasurementMutex.RUnlock()
	return len(fake.performMeasurementArgsForCall)
}

func (fake *FakeBaseMeasurement) PerformMeasurementArgsForCall(i int) (*log.Logger, measurement.ResultSet) {
	fake.performMeasurementMutex.RLock()
	defer fake.performMeasurementMutex.RUnlock()
	return fake.performMeasurementArgsForCall[i].arg1, fake.performMeasurementArgsForCall[i].arg2
}

func (fake *FakeBaseMeasurement) Failed(rs measurement.ResultSet) bool {
	fake.failedMutex.Lock()
	ret, specificReturn := fake.failedReturnsOnCall[len(fake.failedArgsForCall)]
	fake.failedArgsForCall = append(fake.failedArgsForCall, struct {
		rs measurement.ResultSet
	}{rs})
	fake.recordInvocation("Failed", []interface{}{rs})
	fake.failedMutex.Unlock()
	if fake.FailedStub != nil {
		return fake.FailedStub(rs)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.failedReturns.result1
}

func (fake *FakeBaseMeasurement) FailedCallCount() int {
	fake.failedMutex.RLock()
	defer fake.failedMutex.RUnlock()
	return len(fake.failedArgsForCall)
}

func (fake *FakeBaseMeasurement) FailedArgsForCall(i int) measurement.ResultSet {
	fake.failedMutex.RLock()
	defer fake.failedMutex.RUnlock()
	return fake.failedArgsForCall[i].rs
}

func (fake *FakeBaseMeasurement) FailedReturns(result1 bool) {
	fake.FailedStub = nil
	fake.failedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeBaseMeasurement) FailedReturnsOnCall(i int, result1 bool) {
	fake.FailedStub = nil
	if fake.failedReturnsOnCall == nil {
		fake.failedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.failedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeBaseMeasurement) Summary(rs measurement.ResultSet) string {
	fake.summaryMutex.Lock()
	ret, specificReturn := fake.summaryReturnsOnCall[len(fake.summaryArgsForCall)]
	fake.summaryArgsForCall = append(fake.summaryArgsForCall, struct {
		rs measurement.ResultSet
	}{rs})
	fake.recordInvocation("Summary", []interface{}{rs})
	fake.summaryMutex.Unlock()
	if fake.SummaryStub != nil {
		return fake.SummaryStub(rs)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.summaryReturns.result1
}

func (fake *FakeBaseMeasurement) SummaryCallCount() int {
	fake.summaryMutex.RLock()
	defer fake.summaryMutex.RUnlock()
	return len(fake.summaryArgsForCall)
}

func (fake *FakeBaseMeasurement) SummaryArgsForCall(i int) measurement.ResultSet {
	fake.summaryMutex.RLock()
	defer fake.summaryMutex.RUnlock()
	return fake.summaryArgsForCall[i].rs
}

func (fake *FakeBaseMeasurement) SummaryReturns(result1 string) {
	fake.SummaryStub = nil
	fake.summaryReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeBaseMeasurement) SummaryReturnsOnCall(i int, result1 string) {
	fake.SummaryStub = nil
	if fake.summaryReturnsOnCall == nil {
		fake.summaryReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.summaryReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeBaseMeasurement) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	fake.performMeasurementMutex.RLock()
	defer fake.performMeasurementMutex.RUnlock()
	fake.failedMutex.RLock()
	defer fake.failedMutex.RUnlock()
	fake.summaryMutex.RLock()
	defer fake.summaryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBaseMeasurement) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ measurement.BaseMeasurement = new(FakeBaseMeasurement)
