// Code generated by counterfeiter. DO NOT EDIT.
package measurementfakes

import (
	"sync"

	"github.com/cloudfoundry/uptimer/measurement"
)

type FakeMeasurement struct {
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct{}
	nameReturns     struct {
		result1 string
	}
	nameReturnsOnCall map[int]struct {
		result1 string
	}
	StartStub          func()
	startMutex         sync.RWMutex
	startArgsForCall   []struct{}
	StopStub           func()
	stopMutex          sync.RWMutex
	stopArgsForCall    []struct{}
	ResultsStub        func() measurement.ResultSet
	resultsMutex       sync.RWMutex
	resultsArgsForCall []struct{}
	resultsReturns     struct {
		result1 measurement.ResultSet
	}
	resultsReturnsOnCall map[int]struct {
		result1 measurement.ResultSet
	}
	FailedStub        func() bool
	failedMutex       sync.RWMutex
	failedArgsForCall []struct{}
	failedReturns     struct {
		result1 bool
	}
	failedReturnsOnCall map[int]struct {
		result1 bool
	}
	SummaryStub        func() string
	summaryMutex       sync.RWMutex
	summaryArgsForCall []struct{}
	summaryReturns     struct {
		result1 string
	}
	summaryReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMeasurement) Name() string {
	fake.nameMutex.Lock()
	ret, specificReturn := fake.nameReturnsOnCall[len(fake.nameArgsForCall)]
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct{}{})
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.nameReturns.result1
}

func (fake *FakeMeasurement) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeMeasurement) NameReturns(result1 string) {
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeMeasurement) NameReturnsOnCall(i int, result1 string) {
	fake.NameStub = nil
	if fake.nameReturnsOnCall == nil {
		fake.nameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.nameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeMeasurement) Start() {
	fake.startMutex.Lock()
	fake.startArgsForCall = append(fake.startArgsForCall, struct{}{})
	fake.recordInvocation("Start", []interface{}{})
	fake.startMutex.Unlock()
	if fake.StartStub != nil {
		fake.StartStub()
	}
}

func (fake *FakeMeasurement) StartCallCount() int {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return len(fake.startArgsForCall)
}

func (fake *FakeMeasurement) Stop() {
	fake.stopMutex.Lock()
	fake.stopArgsForCall = append(fake.stopArgsForCall, struct{}{})
	fake.recordInvocation("Stop", []interface{}{})
	fake.stopMutex.Unlock()
	if fake.StopStub != nil {
		fake.StopStub()
	}
}

func (fake *FakeMeasurement) StopCallCount() int {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return len(fake.stopArgsForCall)
}

func (fake *FakeMeasurement) Results() measurement.ResultSet {
	fake.resultsMutex.Lock()
	ret, specificReturn := fake.resultsReturnsOnCall[len(fake.resultsArgsForCall)]
	fake.resultsArgsForCall = append(fake.resultsArgsForCall, struct{}{})
	fake.recordInvocation("Results", []interface{}{})
	fake.resultsMutex.Unlock()
	if fake.ResultsStub != nil {
		return fake.ResultsStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.resultsReturns.result1
}

func (fake *FakeMeasurement) ResultsCallCount() int {
	fake.resultsMutex.RLock()
	defer fake.resultsMutex.RUnlock()
	return len(fake.resultsArgsForCall)
}

func (fake *FakeMeasurement) ResultsReturns(result1 measurement.ResultSet) {
	fake.ResultsStub = nil
	fake.resultsReturns = struct {
		result1 measurement.ResultSet
	}{result1}
}

func (fake *FakeMeasurement) ResultsReturnsOnCall(i int, result1 measurement.ResultSet) {
	fake.ResultsStub = nil
	if fake.resultsReturnsOnCall == nil {
		fake.resultsReturnsOnCall = make(map[int]struct {
			result1 measurement.ResultSet
		})
	}
	fake.resultsReturnsOnCall[i] = struct {
		result1 measurement.ResultSet
	}{result1}
}

func (fake *FakeMeasurement) Failed() bool {
	fake.failedMutex.Lock()
	ret, specificReturn := fake.failedReturnsOnCall[len(fake.failedArgsForCall)]
	fake.failedArgsForCall = append(fake.failedArgsForCall, struct{}{})
	fake.recordInvocation("Failed", []interface{}{})
	fake.failedMutex.Unlock()
	if fake.FailedStub != nil {
		return fake.FailedStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.failedReturns.result1
}

func (fake *FakeMeasurement) FailedCallCount() int {
	fake.failedMutex.RLock()
	defer fake.failedMutex.RUnlock()
	return len(fake.failedArgsForCall)
}

func (fake *FakeMeasurement) FailedReturns(result1 bool) {
	fake.FailedStub = nil
	fake.failedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeMeasurement) FailedReturnsOnCall(i int, result1 bool) {
	fake.FailedStub = nil
	if fake.failedReturnsOnCall == nil {
		fake.failedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.failedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeMeasurement) Summary() string {
	fake.summaryMutex.Lock()
	ret, specificReturn := fake.summaryReturnsOnCall[len(fake.summaryArgsForCall)]
	fake.summaryArgsForCall = append(fake.summaryArgsForCall, struct{}{})
	fake.recordInvocation("Summary", []interface{}{})
	fake.summaryMutex.Unlock()
	if fake.SummaryStub != nil {
		return fake.SummaryStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.summaryReturns.result1
}

func (fake *FakeMeasurement) SummaryCallCount() int {
	fake.summaryMutex.RLock()
	defer fake.summaryMutex.RUnlock()
	return len(fake.summaryArgsForCall)
}

func (fake *FakeMeasurement) SummaryReturns(result1 string) {
	fake.SummaryStub = nil
	fake.summaryReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeMeasurement) SummaryReturnsOnCall(i int, result1 string) {
	fake.SummaryStub = nil
	if fake.summaryReturnsOnCall == nil {
		fake.summaryReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.summaryReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeMeasurement) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	fake.resultsMutex.RLock()
	defer fake.resultsMutex.RUnlock()
	fake.failedMutex.RLock()
	defer fake.failedMutex.RUnlock()
	fake.summaryMutex.RLock()
	defer fake.summaryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMeasurement) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ measurement.Measurement = new(FakeMeasurement)
